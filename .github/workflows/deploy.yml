name: CI Deployment 

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
    environment:
      description: Select the environment
      required: true
      type: environment
    branch_override:
      description: Enter branch
      required: false

#env:
#  ENVIRONMENT: ${{ inputs.environment }}
#  BRACNH_OVERRRIDE: ${{ inputs.branch_override }}

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
  deployment:
    runs-on: ubuntu-latest
    needs: build
    # environment:
    #    name: ${{ inputs.environment }}
    #      # url: https://dev-example.com
          
    steps:       
      - name: Set branch
        run: |
          if [ "${{ inputs.branch_override }}" != "" ]; then
            echo "BRANCH_NAME=${{ inputs.branch_override }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "prod" ]; then
            echo "BRANCH_NAME=master" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "stage" ]; then
            echo "BRANCH_NAME=master" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "qa" ]; then
            echo "BRANCH_NAME=stage" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "dev" ]; then
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Deploy to environment
        run: |
          echo "Deploying branch ${{ env.BRANCH_NAME }} to ${{ inputs.environment }} environment..."

      - name: Create Deployment
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"ref\":\"${{ env.BRANCH_NAME }}\",\"environment\":\"${{ inputs.environment }}\",\"auto_merge\":false,\"required_contexts\":[]}" \
            https://api.github.com/repos/${{ github.repository }}/deployments

      - name: Get Deployment ID
        id: get-deployment-id
        run: |
          RESPONSE=$(curl -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments);
          DEPLOYMENT_ID=$(echo $RESPONSE | jq '.[0].id');
          echo $DEPLOYMENT_ID;
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT;

      - name: Log DEPLOYMENT_ID
        env:
          DEPLOYMENT_ID: ${{ steps.get-deployment-id.outputs.DEPLOYMENT_ID }}
        run: echo $DEPLOYMENT_ID

      - name: Update Deployment Status
        env:
          DEPLOYMENT_ID: ${{ steps.get-deployment-id.outputs.DEPLOYMENT_ID }}
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"state\":\"success\",\"environment\":\"${{ inputs.environment }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses
    
    





