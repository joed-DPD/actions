name: CI Deployment

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  #   push:
  #     branches: [ "master" ]
  #   pull_request:
  #     branches: [ "master" ]
  
  pull_request:
    types:
      - closed
    branches:
      - master
      - stage
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: Select the environment
        required: true
        type: environment
      branch_override:
        description: Enter branch override
        required: false

# env:
#   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   PAT: ${{ secrets.PAT }}

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
      ENVIRONMENT_NAME: ${{ steps.branch.outputs.ENVIRONMENT_NAME }}
      
    steps:
      - name: Set branch for workflow_dispatch event
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ "${{ inputs.branch_override }}" != "" ]; then
            echo "BRANCH_NAME=${{ inputs.branch_override }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "l1" ]; then
            echo "BRANCH_NAME=master" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "q2" ]; then
            echo "BRANCH_NAME=master" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "q1" ]; then
            echo "BRANCH_NAME=stage" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "d1" ]; then
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment"
            exit 1
          fi
          
      - name: Set branch for pull_request event
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "BRANCH_NAME=${{ github.base_branch }}" >> $GITHUB_ENV
          
      - name: Set environment for workflow_dispatch event
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "ENVIRONMENT_NAME=${{ inputs.environment }}" >> $GITHUB_ENV
      
      - name: Set environment for pull_request event
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ "${{ github.base_branch }}" == "master" ]; then
            echo "ENVIRONMENT_NAME=q2" >> $GITHUB_ENV
          elif [ "${{ github.base_branch }}" == "stage" ]; then
            echo "ENVIRONMENT_NAME=q1" >> $GITHUB_ENV
          elif [ "${{ github.base_branch }}" == "dev" ]; then
            echo "ENVIRONMENT_NAME=d1" >> $GITHUB_ENV
          else
            echo "Error: Invalid base_branch"
            exit 1
          fi
      
      - name: Output branch and environment
        id: branch
        run: |
          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}" >> $GITHUB_OUTPUT;
          echo "ENVIRONMENT_NAME=${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_OUTPUT;

      - uses: actions/checkout@v3
        with:
          ref: refs/heads/${{ env.BRANCH_NAME }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  
  deployment:
    runs-on: ubuntu-latest
    needs: build
#    environment:
#      name: ${{ inputs.environment }}
        # url: https://dev-example.com
    
    steps:
      - name: Set branch and environment
        run: |
          echo "BRANCH_NAME=${{ needs.build.outputs.BRANCH_NAME }}" >> $GITHUB_ENV;
          echo "ENVIRONMENT_NAME=${{ needs.build.outputs.ENVIRONMENT_NAME }}" >> $GITHUB_ENV;

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: refs/heads/${{ env.BRANCH_NAME }}

      - name: Deploy to environment
        run: |
          echo "Deploying branch ${{ env.BRANCH_NAME }} to ${{ env.ENVIRONMENT_NAME }} environment..."

      - name: Create Deployment
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const payload = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/heads/${{ env.BRANCH_NAME }}',
              environment: '${{ env.ENVIRONMENT_NAME }}',
              task: 'deploy',
              description: 'Test desc',
              auto_merge: false,
              required_contexts: [],
              payload: {
                deployer: process.env.GITHUB_ACTOR
              }
            };
            const { data } = await github.rest.repos.createDeployment(payload);
            console.log(JSON.stringify(data));

#       TODO save Deployment ID directly from create step
      - name: Get Deployment ID
        id: get-deployment-id
        uses: actions/github-script@v6
        with:
          script: |
            const res = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const deploymentId = res.data[0].id;
            console.log(deploymentId);
            core.setOutput('DEPLOYMENT_ID', deploymentId);

      - name: Log DEPLOYMENT_ID
        env:
          DEPLOYMENT_ID: ${{ steps.get-deployment-id.outputs.DEPLOYMENT_ID }}
        run: echo $DEPLOYMENT_ID
        
      - name: Update Deployment Status
        env:
          DEPLOYMENT_ID: ${{ steps.get-deployment-id.outputs.DEPLOYMENT_ID }}
        uses: actions/github-script@v6
        with:
          script: |
            const payload = {
              state: 'success',
              environment: '${{ env.ENVIRONMENT_NAME }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              environment_url: 'https://example.com/environments/${{ env.ENVIRONMENT_NAME }}',
              description: 'Deployment succeeded!',
              auto_inactive: false
            };
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: Number('${{ env.DEPLOYMENT_ID }}'),
              ...payload
            });

  
